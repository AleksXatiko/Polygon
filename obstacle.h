// Generated by gencpp from file poly_ros/obstacle.msg
// DO NOT EDIT!


#ifndef POLY_ROS_MESSAGE_OBSTACLE_H
#define POLY_ROS_MESSAGE_OBSTACLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace poly_ros
{
template <class ContainerAllocator>
struct obstacle_
{
  typedef obstacle_<ContainerAllocator> Type;

  obstacle_()
    : begin_x(0.0)
    , begin_y(0.0)
    , end_x(0.0)
    , end_y(0.0)
    , min_distance(0.0)  {
    }
  obstacle_(const ContainerAllocator& _alloc)
    : begin_x(0.0)
    , begin_y(0.0)
    , end_x(0.0)
    , end_y(0.0)
    , min_distance(0.0)  {
    }



   typedef float _begin_x_type;
  _begin_x_type begin_x;

   typedef float _begin_y_type;
  _begin_y_type begin_y;

   typedef float _end_x_type;
  _end_x_type end_x;

   typedef float _end_y_type;
  _end_y_type end_y;

   typedef float _min_distance_type;
  _min_distance_type min_distance;




  typedef boost::shared_ptr< ::poly_ros::obstacle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poly_ros::obstacle_<ContainerAllocator> const> ConstPtr;

}; // struct obstacle_

typedef ::poly_ros::obstacle_<std::allocator<void> > obstacle;

typedef boost::shared_ptr< ::poly_ros::obstacle > obstaclePtr;
typedef boost::shared_ptr< ::poly_ros::obstacle const> obstacleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poly_ros::obstacle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poly_ros::obstacle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace poly_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'poly_ros': ['/home/ubuntu/catkin_ws/src/poly_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::poly_ros::obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poly_ros::obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poly_ros::obstacle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poly_ros::obstacle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poly_ros::obstacle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poly_ros::obstacle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poly_ros::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4c6411f3831341d8f8f6cddd832ed8c4";
  }

  static const char* value(const ::poly_ros::obstacle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4c6411f3831341d8ULL;
  static const uint64_t static_value2 = 0xf8f6cddd832ed8c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::poly_ros::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poly_ros/obstacle";
  }

  static const char* value(const ::poly_ros::obstacle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poly_ros::obstacle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 begin_x\n\
float32 begin_y\n\
float32 end_x\n\
float32 end_y\n\
float32 min_distance\n\
\n\
\n\
";
  }

  static const char* value(const ::poly_ros::obstacle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poly_ros::obstacle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.begin_x);
      stream.next(m.begin_y);
      stream.next(m.end_x);
      stream.next(m.end_y);
      stream.next(m.min_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct obstacle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poly_ros::obstacle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poly_ros::obstacle_<ContainerAllocator>& v)
  {
    s << indent << "begin_x: ";
    Printer<float>::stream(s, indent + "  ", v.begin_x);
    s << indent << "begin_y: ";
    Printer<float>::stream(s, indent + "  ", v.begin_y);
    s << indent << "end_x: ";
    Printer<float>::stream(s, indent + "  ", v.end_x);
    s << indent << "end_y: ";
    Printer<float>::stream(s, indent + "  ", v.end_y);
    s << indent << "min_distance: ";
    Printer<float>::stream(s, indent + "  ", v.min_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // POLY_ROS_MESSAGE_OBSTACLE_H
