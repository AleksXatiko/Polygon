// Generated by gencpp from file poly_ros/robotModel_parametrs.msg
// DO NOT EDIT!


#ifndef POLY_ROS_MESSAGE_ROBOTMODEL_PARAMETRS_H
#define POLY_ROS_MESSAGE_ROBOTMODEL_PARAMETRS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace poly_ros
{
template <class ContainerAllocator>
struct robotModel_parametrs_
{
  typedef robotModel_parametrs_<ContainerAllocator> Type;

  robotModel_parametrs_()
    : parametr()  {
    }
  robotModel_parametrs_(const ContainerAllocator& _alloc)
    : parametr(_alloc)  {
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _parametr_type;
  _parametr_type parametr;




  typedef boost::shared_ptr< ::poly_ros::robotModel_parametrs_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::poly_ros::robotModel_parametrs_<ContainerAllocator> const> ConstPtr;

}; // struct robotModel_parametrs_

typedef ::poly_ros::robotModel_parametrs_<std::allocator<void> > robotModel_parametrs;

typedef boost::shared_ptr< ::poly_ros::robotModel_parametrs > robotModel_parametrsPtr;
typedef boost::shared_ptr< ::poly_ros::robotModel_parametrs const> robotModel_parametrsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::poly_ros::robotModel_parametrs_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace poly_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'poly_ros': ['/home/ubuntu/catkin_ws/src/poly_ros/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::poly_ros::robotModel_parametrs_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::poly_ros::robotModel_parametrs_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::poly_ros::robotModel_parametrs_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dab3153aca5a64006d9231c7f9f792f5";
  }

  static const char* value(const ::poly_ros::robotModel_parametrs_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdab3153aca5a6400ULL;
  static const uint64_t static_value2 = 0x6d9231c7f9f792f5ULL;
};

template<class ContainerAllocator>
struct DataType< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "poly_ros/robotModel_parametrs";
  }

  static const char* value(const ::poly_ros::robotModel_parametrs_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] parametr\n\
";
  }

  static const char* value(const ::poly_ros::robotModel_parametrs_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.parametr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct robotModel_parametrs_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::poly_ros::robotModel_parametrs_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::poly_ros::robotModel_parametrs_<ContainerAllocator>& v)
  {
    s << indent << "parametr[]" << std::endl;
    for (size_t i = 0; i < v.parametr.size(); ++i)
    {
      s << indent << "  parametr[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.parametr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // POLY_ROS_MESSAGE_ROBOTMODEL_PARAMETRS_H
